/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.appdesign;

import hr.algebra.DAL.Repository;
import hr.algebra.DAL.RepositoryFactory;
import hr.algebra.DAL.rss.RSSParser;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Film;
import hr.algebra.model.Genre;
import hr.algebra.model.MovieModel;
import hr.algebra.model.MovieXML;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.xml.bind.JAXBException;
import javax.xml.stream.XMLStreamException;

/**
 *
 * @author frank
 */
public class EditXML extends javax.swing.JPanel {
    
    private DefaultListModel<Film> moviesModel = new DefaultListModel<>();
    private Repository repository;
    private Film selectedFilm;
    private MovieModel movieModel;
    private List<Film> filmovi;
    
    private static final String FILENAME = "moviearchive.xml";

    public EditXML() {
        initComponents();
        init();
        
    }

    public static <T> Predicate<T> distinctByKey(Function<? super T, Object> keyExtractor) {
        Map<Object, Boolean> map = new ConcurrentHashMap<>();
        return t -> map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
    }
    
     private void init() {
        try {
            repository = RepositoryFactory.getRepository(); 
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(EditXML.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }
     
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMovies = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        btnFetchRss = new javax.swing.JButton();
        btnXML1 = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 172, 229));
        setMinimumSize(new java.awt.Dimension(1020, 700));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 172, 229));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listMovies.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 5, true));
        listMovies.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        listMovies.setForeground(new java.awt.Color(0, 0, 102));
        listMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMoviesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listMovies);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 800, 440));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 102));
        jLabel2.setText("RSS Manager");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, -1, 50));

        btnFetchRss.setText("Fetch RSS");
        btnFetchRss.setToolTipText("Fetch RSS and save it to the Database");
        btnFetchRss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFetchRssActionPerformed(evt);
            }
        });
        jPanel1.add(btnFetchRss, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 580, 110, 40));

        btnXML1.setText("Save as XML");
        btnXML1.setToolTipText("Save RSS as XML file");
        btnXML1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXML1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnXML1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 580, 110, 40));

        btnRefresh.setText("Refresh");
        btnRefresh.setToolTipText("Refresh movie list from the database");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jPanel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 580, 110, 40));

        btnDelete.setText("Delete All");
        btnDelete.setToolTipText("Delete all movies and persons from the database.");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 580, 110, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/mainApp_bckg.jpg"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(1020, 700));
        jLabel1.setMinimumSize(new java.awt.Dimension(1020, 700));
        jLabel1.setPreferredSize(new java.awt.Dimension(1020, 700));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 760));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 700));
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void btnFetchRssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFetchRssActionPerformed

        try {
            repository.deleteAll();
            List<Film> movies = RSSParser.parse();
            List<Director> directors = new ArrayList<>();
            List<Actor> actors = new ArrayList<>();
            List<Genre> genres = new ArrayList<>();
            repository.createMovies(movies);
            for (Film movie : movies) {
                directors.addAll(movie.getDirector());
                genres.addAll(movie.getGenre());
                try {
                    actors.addAll(movie.getActors());
                } catch (Exception e) {

                }
            }
            List<Film> movieWithoutNull = new ArrayList<>();
            
            
            for (Film movie : movies) {
                if (movie.getActors()!=null) {
                    movieWithoutNull.add(movie);
                }
            }

            List<Actor> distinctElements = actors.stream()
                    .filter(distinctByKey(p -> p.getFirstName()))
                    .collect(Collectors.toList());
            
            
            repository.createDirectors(directors);
            repository.createActors(actors);
            repository.createGenres(genres);

            List<Film> filmsFromSQL = repository.selectMovies();
            List<Director> dirsFromSQL = repository.selectDirectors();
            List<Actor> actorsFromSQL = repository.selectActors();
            List<Genre> genresFromSQL = repository.selectGenres();

            repository.createMoviesDirectors(movies, directors, dirsFromSQL, filmsFromSQL);
            repository.createMovieGenre(movies, genres, filmsFromSQL, genresFromSQL);
            repository.createMovieActors(movieWithoutNull, distinctElements, actorsFromSQL, filmsFromSQL);
            loadModel();
            moviesModel.clear();
            movies.forEach(moviesModel::addElement);
            MessageUtils.showInformationMessage("Success!", "Database has been successfully updated!");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload movies");
            System.out.println(ex.getMessage());
            //System.exit(1);
        }
    }//GEN-LAST:event_btnFetchRssActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        init();
        try {
            loadModel();
            MessageUtils.showInformationMessage("Success!", "Movie list has been successfully updated!");
        } catch (Exception ex) {
            Logger.getLogger(EditXML.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void listMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMoviesMouseClicked
        
    }//GEN-LAST:event_listMoviesMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (MessageUtils.showConfirmDialog(
                "Warning!",
                "Do you really want to delete all movies?") == JOptionPane.YES_OPTION) {
            try {
            repository.deleteAll();
            loadModel();
            MessageUtils.showInformationMessage("Success!", "Database has been successfully erased!");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Unable to delete movies");
        }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnXML1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXML1ActionPerformed
        saveToXML();
    }//GEN-LAST:event_btnXML1ActionPerformed

public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditXML().setVisible(true);
            }
        });
    }

    private void loadModel() throws Exception {
        filmovi = repository.selectMovies();
        moviesModel.clear();
        filmovi.forEach(movie -> moviesModel.addElement(movie));
        listMovies.setModel(moviesModel);
    }
    
    private void saveToXML() {
        if (MessageUtils.showConfirmDialog(
                "Warning!",
                "Do you want to generate XML file?") == JOptionPane.YES_OPTION) {
            try {
            JAXBUtils.save(new MovieXML(filmovi), FILENAME);
            MessageUtils.showInformationMessage("XML File", "XML file successfully generated!");
        } catch (JAXBException ex) {
            MessageUtils.showErrorMessage("Error", "Unable to generate XML file");
            Logger.getLogger(EditXML.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFetchRss;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnXML1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Film> listMovies;
    // End of variables declaration//GEN-END:variables

 
       
}
